version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: task-manager-db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: task_management
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - task-manager-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d task_management"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    container_name: task-manager-backend
    environment:
      PORT: 5000
      NODE_ENV: production
      JWT_SECRET: your_super_secret_jwt_key_here_please_change_in_production_very_long_and_secure_key_123456789
      DATABASE_URL: postgresql://user:password@postgres:5432/task_management?schema=public
      FRONTEND_URL: http://localhost:3000
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - task-manager-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    volumes:
      # Only mount logs for debugging, not source code in production
      - backend_logs:/app/logs

  # Frontend React App
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
      args:
        # Frontend makes API calls to backend (from browser perspective)
        VITE_API_URL: http://localhost:5000
    container_name: task-manager-frontend
    ports:
      # Map container port 8080 to host port 3000
      # This means users access the app at localhost:3000
      - "3000:8080"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - task-manager-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  backend_logs:
    driver: local

networks:
  task-manager-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
